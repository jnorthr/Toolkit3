/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jimnorthrop' at '9/25/16 1:51 PM' with Gradle 3.1
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_groovy_projects.html
 */


// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'application'

ext{
	appName = 'Configurator'
	codeversion = '0.3'
	vendor ='jnorthr'
}

defaultTasks 'clean', 'getJars', 'build','test', 'runJSON', 'run1','run2', 'run', 'runProperty', 'runTool'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile fileTree(dir: "$projectDir/src/main/libs", include: ['*.jar'])
    runtime fileTree(dir: "$projectDir/src/main/libs", include: ['*.jar'])
    testCompile fileTree(dir: "$projectDir/src/main/libs", include: ['*.jar'])
    testRuntime fileTree(dir: "$projectDir/src/main/libs", include: ['*.jar'])

    // We use the latest groovy 2.x version for building this library
    compile 'org.codehaus.groovy:groovy-all:2.4.9'

    // We use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'
}

mainClassName = "io.jnorthr.tools.configuration.Configurator"

task getJars { 
  def destDir = "$projectDir/src/main/libs" //  Adds/encapsulates a dynamic property within task for O-O
  doFirst { 
    copy { 
      from '../Tools/build/libs'
      from '../Chooser/build/libs'
      into destDir 
	} 
  } 
}

// run main method
task run1(type: JavaExec) {
    main = "io.jnorthr.tools.configuration.Configurator"
    classpath = sourceSets.main.runtimeClasspath
}


// feed gradle projectDir value as first parameter
task run2(type: JavaExec) {
    main = "io.jnorthr.tools.configuration.Configurator"
    classpath = sourceSets.main.runtimeClasspath
    args = [".gradleRun2.config"] // simple filename only without any path pls. !
}

// run test properties file slurper
// Feature to confirm a configuration file exists or build a simple one if it does not
task runTool(type: JavaExec) {
    main = "io.jnorthr.tools.configuration.ConfigTool"
    classpath = sourceSets.main.runtimeClasspath
}

// run java property file existence task
// Feature to confirm a java property file exists or build a simple one if it does not
task runProperty(type: JavaExec) {
    main = "io.jnorthr.tools.properties.PropertyTool"
    classpath = sourceSets.main.runtimeClasspath
}

// run groovy JSON consumer tool
// Feature to maintain a JSON file that exists or build a simple one if it does not
task runJSON(type: JavaExec) {
    main = "io.jnorthr.tools.json.JSONTool"
    classpath = sourceSets.main.runtimeClasspath
}

// run main method
task runSample(type: JavaExec) {
    main = "ConfigTester"
    classpath = sourceSets.main.runtimeClasspath
}


jar.doFirst{
      manifest {
            attributes(
                "Manifest-Version"      : '1.0',
                "Created-By"            : vendor,
                "Specification-Title"   : appName,
                "Specification-Version" : codeversion,
                "Specification-Vendor"  : vendor,
                "Implementation-Title"  : appName,
                "Implementation-Version": codeversion,
                "Implementation-Vendor" : vendor,
                "Main-Class"            : "io.jnorthr.tools.configuration.Configurator",
                "Built-By"				: System.properties['user.name'],
                "Class-Path"            : configurations.compile.collect { it.getName() }.join(' ')
                //"Build-Date"            : buildDate,
                //"Build-Time"            : project.buildTime
             )
      } // end of manifest
} // end of doFirst

// ----------------------------------------------------------
// Following are internal to gradle
// Safari books online chapter 3 - hooking the build finished processing
gradle.buildFinished { buildResult ->
	println "BUILD FINISHED"
	println "build failure - "+ buildResult?.failure
}

task succeed{
	doLast{
		println "task in build.gradle succeeded"
	} // last
} // end of succeed

task fail{
	doLast{
		throw new Exception("Build failed !")
	} // last
} // end of fail

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}
