/*
 * This build file was created by 'jim' at '22/1/17 11:18 PM' with Gradle 3.4
 */

// Apply the plugin to add support for Groovy
apply plugin: 'groovy'

defaultTasks 'clean','build', 'test', 'groovydoc', 'runner','runChecker', 'runChecker1' // 'getJars', 

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    //compile fileTree(dir: "$projectDir/src/main/libs", include: ['*.jar'])

    compile "org.codehaus.groovy:groovy-all:2.4.9"
    runtime "org.codehaus.groovy:groovy-all:2.4.9"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    // Spock Framework basic dependencies:
    testCompile "org.codehaus.groovy:groovy-all:2.4.9"
    // The version have to be compatible with Groovy:
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
 
    // Optional dependencies Spock
    // To use Hamcrest matchers:
    testCompile "org.hamcrest:hamcrest-core:1.3"
 
    // To mock classes:
    testRuntime "cglib:cglib-nodep:3.1"
    // Use with cglib to mock classes without default constructor:
    testRuntime "org.objenesis:objenesis:2.1"
}

task getJars { 
  def destDir = "$projectDir/src/main/libs" //  Adds/encapsulates a dynamic property within task for O-O
  doFirst { 
    copy { 
      from '../CRUD/build/libs'
      into destDir 
	} 
  } 
}

// runs our main() method; first arg points to a local folder / path name
task(runner, dependsOn: 'classes', type: JavaExec) {
	main = 'io.jnorthr.toolkit.PathFinder'
	classpath = sourceSets.main.runtimeClasspath
	args '/Users/jimnorthrop/Dropbox/Projects/Toolkit/src', ~/^.*\.properties$/
	systemProperty 'simple.message', 'Hi kids '
}


// run config.file existence checker task
// Feature to confirm a configuration file exists or build a simple one if it does not
task runChecker(type: JavaExec) {
    main = "io.jnorthr.toolkit.Checker"
    classpath = sourceSets.main.runtimeClasspath
}


// run config.file existence checker task with a single arg name for the configuration file being needed
// Feature to confirm a configuration file exists or build a simple one if it does not
task runChecker1(type: JavaExec) {
    main = "io.jnorthr.toolkit.Checker"
    classpath = sourceSets.main.runtimeClasspath
    args = [".gradleRunChecker1.config"] // simple filename only without any path pls. !
}



